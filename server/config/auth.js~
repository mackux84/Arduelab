'use strict'

const key = {
  privateKey: 'NeverShareYourSecret',
  tokenExpiry: 1 * 60 * 60 * 1000, // 1 hour
}
const server = {
  host: '0.0.0.0',
  port: 5000
}
const validate = function (token, request, callback) {
  //This Function is called BEFORE creating a token
  //It is also called on jwt secured pages
  const Moment = require('moment')
  let decyptToken = require('../users/util/userFunctions').decyptToken
  let decyptToken2 = require('../users/util/userFunctions').decyptToken2
  // decrypt the token
  if (token.type === 'workbench') {
    token = decyptToken2(token)
  } else {
    token = decyptToken(token)
  }
  // Check token timestamp
  var diff = Moment().diff(Moment(token.iat * 1000))
  if (diff > key.tokenExpiry || diff<0) {
    return callback(null, false)
  }
  return callback(null, true, token)
}
const jws = [
  'jwt', 'jwt', {
    validateFunc: validate,
    key: key.privateKey,
    verifyOptions: { algorithms: ['HS256']}
  }
]
const user_db = {
  host: '192.168.1.54',
  port: 27017,
  db: 'Arduino',
  username: 'administrador',
  password: 'arduserver'
}
const email = {
  username: 'info@arduinserver.com',
  password: 'password',
  accountName: 'arduino-server',
  verifyEmailUrl: 'users/verifyEmail',
  smtp :'smtps://arduinserver%40gmail.com:arduserver123@smtp.gmail.com'
}

module.exports = {jws, key, email, server, user_db}

/**
    * "How to generate secret key?"
    * There are several options for generating secret keys. The easiest way is to run node's crypto hash in your terminal:
    * node -e "console.log(require('crypto').randomBytes(256).toString('base64'));"
    * or this other for Random URL and filename string safe (1 liner)
    * node -e "console.log(require('crypto').randomBytes(48).toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, ''));"
    * and copy the resulting base64 key and use it as your JWT secret.
    * If you are curious how strong that key is watch: https://youtu.be/koJQQWHI-ZA
*/
